import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import models

class PreNet(nn.Module):
    def __init__(self):
        super(PreNet,self).__init__()
        self.conv1 = nn.Conv2d(4, 8, 3, padding = 1)
        self.act1  = nn.LeakyReLU(0.2, inplace=False)
        self.conv2 = nn.Conv2d(8, 16, 3, padding = 1)  
        self.act2  = nn.LeakyReLU(0.2, inplace=False)
        
    def forward(self, labels):
        conv1 = self.act1(self.conv1(labels))
        conv2 = self.act2(self.conv2(conv1))
        
        return conv2

class SUMNet_v1(nn.Module):
    def __init__(self):
        super(SUMNet, self).__init__()
        self.conv1     = nn.Conv2d(4, 64, 3, padding=(1,1))
        self.bn1       = nn.BatchNorm2d(64)
        self.pool1     = nn.MaxPool2d(2, 2, return_indices = False)
        self.conv2     = nn.Conv2d(64, 128, 3, padding=(1,1))
        self.bn2       = nn.BatchNorm2d(128)
        self.pool2     = nn.MaxPool2d(2, 2, return_indices = False)
        self.conv3a    = nn.Conv2d(128, 256, 3, padding=(1,1))
        self.bn3       = nn.BatchNorm2d(256)
        self.conv3b    = nn.Conv2d(256, 256, 3, padding=(1,1))
        self.bn4       = nn.BatchNorm2d(256)
        self.pool3     = nn.MaxPool2d(2, 2, return_indices = False)
        self.conv4a    = nn.Conv2d(256, 512, 3, padding=(1,1))
        self.bn5       = nn.BatchNorm2d(512)
        self.conv4b    = nn.Conv2d(512, 512, 3, padding=(1,1))
        self.bn6       = nn.BatchNorm2d(512)
        self.pool4     = nn.MaxPool2d(2, 2, return_indices = False)
        self.conv5a    = nn.Conv2d(512, 512, 3, padding=(1,1))
        self.bn7       = nn.BatchNorm2d(512)
        self.conv5b    = nn.Conv2d(512, 512, 3, padding=(1,1))
        self.bn8       = nn.BatchNorm2d(512)
        self.pool5     = nn.MaxPool2d(2, 2, return_indices = False)
       
        self.unpool5   = nn.MaxUnpool2d(2, 2)
        self.donv5b    = nn.Conv2d(1024, 512, 3, padding = 1)
        self.donv5a    = nn.Conv2d(512, 512, 3, padding = 1)
        self.unpool4   = nn.MaxUnpool2d(2, 2)
        self.donv4b    = nn.Conv2d(1024, 512, 3, padding = 1)
        self.donv4a    = nn.Conv2d(512, 256, 3, padding = 1)
        self.unpool3   = nn.MaxUnpool2d(2, 2)
        self.donv3b    = nn.Conv2d(512, 256, 3, padding = 1)
        self.donv3a    = nn.Conv2d(256,128, 3, padding = 1)
        self.unpool2   = nn.MaxUnpool2d(2, 2)
        self.donv2     = nn.Conv2d(256, 64, 3, padding = 1)
        self.unpool1   = nn.MaxUnpool2d(2, 2)
        self.donv1     = nn.Conv2d(128, 32, 3, padding = 1)
        self.output    = nn.Conv2d(32, 4, 1)
        
    def forward(self, x):
        conv1          = F.relu(self.bn1(self.conv1(x)), inplace = True)
        pool1, idxs1   = self.pool1(conv1)
        conv2          = F.relu(self.bn2(self.conv2(pool1)), inplace = True)
        pool2, idxs2   = self.pool2(conv2)
        conv3a         = F.relu(self.bn3(self.conv3a(pool2)), inplace = True)
        conv3b         = F.relu(self.bn4(self.conv3b(conv3a)), inplace = True)
        pool3, idxs3   = self.pool3(conv3b)
        conv4a         = F.relu(self.bn5(self.conv4a(pool3)), inplace = True)
        conv4b         = F.relu(self.bn6(self.conv4b(conv4a)), inplace = True)
        pool4, idxs4   = self.pool4(conv4b)
        conv5a         = F.relu(self.bn7(self.conv5a(pool4)), inplace = True)
        conv5b         = F.relu(self.bn8(self.conv5b(conv5a)), inplace = True)
        pool5, idxs5   = self.pool5(conv5b)
        
        unpool5        = torch.cat([self.unpool5(pool5, idxs5), conv5b], 1)
        donv5b         = F.relu(self.donv5b(unpool5), inplace = True)
        donv5a         = F.relu(self.donv5a(donv5b), inplace = True)
        unpool4        = torch.cat([self.unpool4(donv5a, idxs4), conv4b], 1)
        donv4b         = F.relu(self.donv4b(unpool4), inplace = True)
        donv4a         = F.relu(self.donv4a(donv4b), inplace = True)
        unpool3        = torch.cat([self.unpool3(donv4a, idxs3), conv3b], 1)
        donv3b         = F.relu(self.donv3b(unpool3), inplace = True)
        donv3a         = F.relu(self.donv3a(donv3b))
        unpool2        = torch.cat([self.unpool2(donv3a, idxs2), conv2], 1)
        donv2          = F.relu(self.donv2(unpool2), inplace = True)
        unpool1        = torch.cat([self.unpool1(donv2, idxs1), conv1], 1)
        donv1          = F.relu(self.donv1(unpool1), inplace = True)
        output         = self.output(donv1) 
        return torch.sigmoid(output)

class SUMNet(nn.Module):
    def __init__(self):
        super(SUMNet, self).__init__()       
        self.conv1     = nn.Conv2d(16, 64, 3, padding=(1,1))
        self.bn1       = nn.BatchNorm2d(64)
        self.pool1     = nn.MaxPool2d(2, 2, return_indices = False)
        self.conv2     = nn.Conv2d(64, 128, 3, padding=(1,1))
        self.bn2       = nn.BatchNorm2d(128)
        self.pool2     = nn.MaxPool2d(2, 2, return_indices = False)
        self.conv3a    = nn.Conv2d(128, 256, 3, padding=(1,1))
        self.bn3       = nn.BatchNorm2d(256)
        self.conv3b    = nn.Conv2d(256, 256, 3, padding=(1,1))
        self.bn4       = nn.BatchNorm2d(256)
        self.pool3     = nn.MaxPool2d(2, 2, return_indices = False)
        self.conv4a    = nn.Conv2d(256, 512, 3, padding=(1,1))
        self.bn5       = nn.BatchNorm2d(512)
        self.conv4b    = nn.Conv2d(512, 512, 3, padding=(1,1))
        self.bn6       = nn.BatchNorm2d(512)
        self.pool4     = nn.MaxPool2d(2, 2, return_indices = False)
        self.conv5a    = nn.Conv2d(512, 512, 3, padding=(1,1))
        self.bn7       = nn.BatchNorm2d(512)
        self.conv5b    = nn.Conv2d(512, 512, 3, padding=(1,1))
        self.bn8       = nn.BatchNorm2d(512)
        self.pool5     = nn.MaxPool2d(2, 2, return_indices = False)
       
        self.unpool5   = nn.MaxUnpool2d(2, 2)
        self.donv5b    = nn.Conv2d(1024, 512, 3, padding = 1)
        self.donv5a    = nn.Conv2d(512, 512, 3, padding = 1)
        self.unpool4   = nn.MaxUnpool2d(2, 2)
        self.donv4b    = nn.Conv2d(1024, 512, 3, padding = 1)
        self.donv4a    = nn.Conv2d(512, 256, 3, padding = 1)
        self.unpool3   = nn.MaxUnpool2d(2, 2)
        self.donv3b    = nn.Conv2d(512, 256, 3, padding = 1)
        self.donv3a    = nn.Conv2d(256,128, 3, padding = 1)
        self.unpool2   = nn.MaxUnpool2d(2, 2)
        self.donv2     = nn.Conv2d(256, 64, 3, padding = 1)
        self.unpool1   = nn.MaxUnpool2d(2, 2)
        self.donv1     = nn.Conv2d(128, 32, 3, padding = 1)
        self.output    = nn.Conv2d(32, 4, 1)
        
    def forward(self, x):
        conv1          = F.relu(self.bn1(self.conv1(x)), inplace = True)
        pool1, idxs1   = self.pool1(conv1)
        conv2          = F.relu(self.bn2(self.conv2(pool1)), inplace = True)
        pool2, idxs2   = self.pool2(conv2)
        conv3a         = F.relu(self.bn3(self.conv3a(pool2)), inplace = True)
        conv3b         = F.relu(self.bn4(self.conv3b(conv3a)), inplace = True)
        pool3, idxs3   = self.pool3(conv3b)
        conv4a         = F.relu(self.bn5(self.conv4a(pool3)), inplace = True)
        conv4b         = F.relu(self.bn6(self.conv4b(conv4a)), inplace = True)
        pool4, idxs4   = self.pool4(conv4b)
        conv5a         = F.relu(self.bn7(self.conv5a(pool4)), inplace = True)
        conv5b         = F.relu(self.bn8(self.conv5b(conv5a)), inplace = True)
        pool5, idxs5   = self.pool5(conv5b)
        
        unpool5        = torch.cat([self.unpool5(pool5, idxs5), conv5b], 1)
        donv5b         = F.relu(self.donv5b(unpool5), inplace = True)
        donv5a         = F.relu(self.donv5a(donv5b), inplace = True)
        unpool4        = torch.cat([self.unpool4(donv5a, idxs4), conv4b], 1)
        donv4b         = F.relu(self.donv4b(unpool4), inplace = True)
        donv4a         = F.relu(self.donv4a(donv4b), inplace = True)
        unpool3        = torch.cat([self.unpool3(donv4a, idxs3), conv3b], 1)
        donv3b         = F.relu(self.donv3b(unpool3), inplace = True)
        donv3a         = F.relu(self.donv3a(donv3b))
        unpool2        = torch.cat([self.unpool2(donv3a, idxs2), conv2], 1)
        donv2          = F.relu(self.donv2(unpool2), inplace = True)
        unpool1        = torch.cat([self.unpool1(donv2, idxs1), conv1], 1)
        donv1          = F.relu(self.donv1(unpool1), inplace = True)
        output         = self.output(donv1) 
        return torch.sigmoid(output)

class Discriminator(nn.Module):
    def __init__(self):
        super(Discriminator,self).__init__()
        self.conv1 = nn.Conv2d(2, 16, 4, 2, 1, bias=False)
        self.act1  = nn.LeakyReLU(0.2, inplace=False)
        self.conv2 = nn.Conv2d(16, 32, 4, 2, 1, bias=False)  
        self.act2  = nn.LeakyReLU(0.2, inplace=False)
        self.conv3 = nn.Conv2d(32, 64, 4, 2, 1, bias=False)   
        self.act3  = nn.LeakyReLU(0.2, inplace=False)
        self.conv4 = nn.Conv2d(64, 128, 4, 2, 1, bias=False)       
        self.act4  = nn.LeakyReLU(0.2, inplace=False)
        self.conv5 = nn.Conv2d(128, 128, 4, 2, 1, bias=False) 
        self.act5  = nn.LeakyReLU(0.2, inplace=False)   
        self.conv6 = nn.Conv2d(128, 128, 4,2,1, bias=False)   
        self.act6  = nn.LeakyReLU(0.2, inplace=False)
        self.conv7 = nn.Conv2d(128, 2, 3, 1, bias=False)
        self.pool7 = nn.MaxPool2d(2,stride=2)
        
    def forward(self, labels):
        conv1 = self.act1(self.conv1(labels))
        conv2 = self.act2(self.conv2(conv1))
        conv3 = self.act3(self.conv3(conv2))
        conv4 = self.act4(self.conv4(conv3))
        conv5 = self.act5(self.conv5(conv4))
        conv6 = self.act6(self.conv6(conv5))
        conv7 = self.conv7(conv6)
        pool7 = self.pool7(conv7)
        return torch.sigmoid(pool7)
